#include "Disassembly.hpp"
#include "Emulator.hpp"

#include <fmt/format.h>

static const InstructionDefinition INSTRUCTION_DEFINITIONS[] = {
    { 1, "BRK" },
    { 2, "ORA ({0:02X},X)" },
    { 1, "E$02" },
    { 1, "E$03" },
    { 1, "E$04" },
    { 2, "ORA  {0:02X}" },
    { 2, "ASL  {0:02X}" },
    { 1, "E$07" },
    { 1, "PHP" },
    { 2, "ORA #{0:02X}" },
    { 1, "ASL A" },
    { 1, "E$0B" },
    { 1, "E$0C" },
    { 1, "ORA" },
    { 2, "ASL  {0:02X}" },
    { 1, "E$0F" },
    { 2, "BPL  {2:04X}" },
    { 2, "ORA ({0:02X}),Y" },
    { 1, "E$12" },
    { 1, "E$13" },
    { 1, "E$14" },
    { 2, "ORA  {0:02X},X" },
    { 2, "ASL  {0:02X},X" },
    { 1, "E$17" },
    { 1, "CLC" },
    { 3, "ORA  {1:02X}{0:02X},Y" },
    { 1, "E$1A" },
    { 1, "E$1B" },
    { 1, "E$1C" },
    { 3, "ORA  {1:02X}{0:02X},X" },
    { 3, "ASL  {1:02X}{0:02X},X" },
    { 1, "E$1F" },
    { 3, "JSR  {1:02X}{0:02X}" },
    { 2, "AND ({0:02X},X)" },
    { 1, "E$22" },
    { 1, "E$23" },
    { 2, "BIT  {0:02X}" },
    { 2, "AND  {0:02X}" },
    { 2, "ROL  {0:02X}" },
    { 1, "E$27" },
    { 1, "PLP" },
    { 2, "AND #{0:02X}" },
    { 1, "ROL A" },
    { 1, "E$2B" },
    { 3, "BIT  {1:02X}{0:02X}" },
    { 3, "AND  {1:02X}{0:02X}" },
    { 3, "ROL  {1:02X}{0:02X}" },
    { 1, "E$2F" },
    { 2, "BMI  {2:04X}" },
    { 2, "AND ({0:02X}),Y" },
    { 1, "E$32" },
    { 1, "E$33" },
    { 1, "E$34" },
    { 2, "AND  {0:02X},X" },
    { 2, "ROL  {0:02X},X" },
    { 1, "E$37" },
    { 1, "SEC" },
    { 2, "AND  {0:02X},Y" },
    { 1, "E$3A" },
    { 1, "E$3B" },
    { 1, "E$3C" },
    { 3, "AND  {1:02X}{0:02X},X" },
    { 3, "ROL  {1:02X}{0:02X},X" },
    { 1, "E$3F" },
    { 1, "RTI" },
    { 2, "EOR ({0:02X},X)" },
    { 1, "E$42" },
    { 1, "E$43" },
    { 1, "E$44" },
    { 2, "EOR  {0:02X}" },
    { 2, "LSR  {0:02X}" },
    { 1, "E$47" },
    { 1, "PHA" },
    { 2, "EOR #{0:02X}" },
    { 1, "LSR A" },
    { 1, "E$4B" },
    { 3, "JMP  {1:02X}{0:02X}" },
    { 3, "EOR  {1:02X}{0:02X}" },
    { 3, "LSR  {1:02X}{0:02X}" },
    { 1, "E$4F" },
    { 2, "BVC  {2:04X}" },
    { 2, "EOR ({0:02X}),Y" },
    { 1, "E$52" },
    { 1, "E$53" },
    { 1, "E$54" },
    { 2, "EOR  {0:02X},X" },
    { 2, "LSR  {0:02X},X" },
    { 1, "E$57" },
    { 1, "CLI" },
    { 3, "EOR  {1:02X}{0:02X},Y" },
    { 1, "E$5A" },
    { 1, "E$5B" },
    { 1, "E$5C" },
    { 3, "EOR  {1:02X}{0:02X},X" },
    { 3, "LSR  {1:02X}{0:02X},X" },
    { 1, "E$5F" },
    { 1, "RTS" },
    { 2, "ADC ({0:02X},X)" },
    { 1, "E$62" },
    { 1, "E$63" },
    { 1, "E$64" },
    { 2, "ADC  {0:02X}" },
    { 2, "ROR  {0:02X}" },
    { 1, "E$67" },
    { 1, "PLA" },
    { 2, "ADC #{0:02X}" },
    { 1, "ROR A" },
    { 1, "E$6B" },
    { 3, "JMP ({1:02X}{0:02X})" },
    { 3, "ADC  {1:02X}{0:02X}" },
    { 3, "ROR  {1:02X}{0:02X}" },
    { 1, "E$6F" },
    { 2, "BVS  {2:04X}" },
    { 2, "ADC ({0:02X}),Y" },
    { 1, "E$72" },
    { 1, "E$73" },
    { 1, "E$74" },
    { 2, "ADC  {0:02X},X" },
    { 2, "ROR  {0:02X},X" },
    { 1, "E$77" },
    { 1, "SEI" },
    { 3, "ADC  {1:02X}{0:02X},Y" },
    { 1, "E$7A" },
    { 1, "E$7B" },
    { 1, "E$7C" },
    { 3, "ADC  {1:02X}{0:02X},X" },
    { 3, "ROR  {1:02X}{0:02X},X" },
    { 1, "E$7F" },
    { 1, "E$80" },
    { 2, "STA ({0:02X},X)" },
    { 1, "E$82" },
    { 1, "E$83" },
    { 2, "STY  {0:02X}" },
    { 2, "STA  {0:02X}" },
    { 2, "STX  {0:02X}" },
    { 1, "E$87" },
    { 1, "DEY" },
    { 1, "E$89" },
    { 1, "TXA" },
    { 1, "E$8B" },
    { 3, "STY  {1:02X}{0:02X}" },
    { 3, "STA  {1:02X}{0:02X}" },
    { 3, "STX  {1:02X}{0:02X}" },
    { 1, "E$8F" },
    { 2, "BCC  {2:04X}" },
    { 2, "STA ({0:02X}),Y" },
    { 1, "E$92" },
    { 1, "E$93" },
    { 2, "STY  {0:02X},X" },
    { 2, "STA  {0:02X},X" },
    { 2, "STX  {0:02X},Y" },
    { 1, "E$97" },
    { 1, "TYA" },
    { 3, "STA  {1:02X}{0:02X},Y" },
    { 1, "TXS" },
    { 1, "E$9B" },
    { 1, "E$9C" },
    { 3, "STA  {1:02X}{0:02X},X" },
    { 1, "E$9E" },
    { 1, "E$9F" },
    { 2, "LDY #{0:02X}" },
    { 2, "LDA ({0:02X},X)" },
    { 2, "LDX #{0:02X}" },
    { 1, "E$A3" },
    { 2, "LDY  {0:02X}" },
    { 2, "LDA  {0:02X}" },
    { 2, "LDX  {0:02X}" },
    { 1, "E$A7" },
    { 1, "TAY" },
    { 2, "LDA #{0:02X}" },
    { 1, "TAX" },
    { 1, "E$AB" },
    { 3, "LDY  {1:02X}{0:02X}" },
    { 3, "LDA  {1:02X}{0:02X}" },
    { 3, "LDX  {1:02X}{0:02X}" },
    { 1, "E$AF" },
    { 2, "BCS  {2:04X}" },
    { 2, "LDA ({0:02X}),Y" },
    { 1, "E$B2" },
    { 1, "E$B3" },
    { 2, "LDY  {0:02X},X" },
    { 2, "LDA  {0:02X},X" },
    { 2, "LDX  {0:02X},Y" },
    { 1, "E$B7" },
    { 1, "CLV" },
    { 3, "LDA  {1:02X}{0:02X},Y" },
    { 1, "TSX" },
    { 1, "E$BB" },
    { 3, "LDY  {1:02X}{0:02X}" },
    { 3, "LDA  {1:02X}{0:02X},X" },
    { 3, "LDX  {1:02X}{0:02X},Y" },
    { 1, "E$BF" },
    { 2, "CPY #{0:02X}" },
    { 2, "CMP ({0:02X},X)" },
    { 1, "E$C2" },
    { 1, "E$C3" },
    { 2, "CPY  {0:02X}" },
    { 2, "CMP  {0:02X}" },
    { 2, "DEC  {0:02X}" },
    { 1, "E$C7" },
    { 1, "INY" },
    { 2, "CMP #{0:02X}" },
    { 1, "DEX" },
    { 1, "E$CB" },
    { 3, "CPY  {1:02X}{0:02X}" },
    { 3, "CMP  {1:02X}{0:02X}" },
    { 3, "DEC  {1:02X}{0:02X}" },
    { 1, "E$CF" },
    { 2, "BNE  {2:04X}" },
    { 2, "CMP ({0:02X}),Y" },
    { 1, "E$D2" },
    { 1, "E$D3" },
    { 1, "E$D4" },
    { 2, "CMP  {0:02X},X" },
    { 2, "DEC  {0:02X},X" },
    { 1, "E$D7" },
    { 1, "CLD" },
    { 3, "CMP  {1:02X}{0:02X},Y" },
    { 1, "E$DA" },
    { 1, "E$DB" },
    { 1, "E$DC" },
    { 3, "CMP  {1:02X}{0:02X},X" },
    { 3, "DEC  {1:02X}{0:02X},X" },
    { 1, "E$DF" },
    { 2, "CPX #{0:02X}" },
    { 2, "SBC ({0:02X},X)" },
    { 1, "E$2" },
    { 1, "E$3" },
    { 2, "CPX  {0:02X}" },
    { 2, "SBC  {0:02X}" },
    { 2, "INC  {0:02X}" },
    { 1, "E$E7" },
    { 1, "INX" },
    { 2, "SBC #{0:02X}" },
    { 1, "NOP" },
    { 1, "E$B" },
    { 3, "CPX  {1:02X}{0:02X}" },
    { 3, "SBC  {1:02X}{0:02X}" },
    { 3, "INC  {1:02X}{0:02X}" },
    { 1, "E$EF" },
    { 2, "BEQ  {2:04X}" },
    { 2, "SBC ({0:02X}),Y" },
    { 1, "E$F2" },
    { 1, "E$F3" },
    { 1, "E$F4" },
    { 2, "SBC  {0:02X},X" },
    { 2, "INC  {0:02X},X" },
    { 1, "E$F7" },
    { 1, "SED" },
    { 3, "SBC {2:02X}{1:02X},Y" },
    { 1, "E$FA" },
    { 1, "E$FB" },
    { 1, "E$FC" },
    { 3, "SBC {2:02X}{1:02X},X" },
    { 3, "INC {2:02X}{1:02X},X" },
    { 1, "E$FF" },
};

InstructionRecord::InstructionRecord(Emulator * emu, word address)
    : Address(address)
{
    Opcodes[0] = emu->ReadByte(address, false);
    Definition = &INSTRUCTION_DEFINITIONS[Opcodes[0]];

    if (Definition->ByteCount > 1) {
        Opcodes[1] = emu->ReadByte(address + 1, false);
    }
    
    if (Definition->ByteCount > 2) {
        Opcodes[2] = emu->ReadByte(address + 2, false);
    }
}

const char * InstructionRecord::ToString()
{
    static char buffer[1024];

    memset(buffer, 0, sizeof(buffer));

    auto it = fmt::format_to(buffer, "{:04X} ", Address);

    if (Definition->ByteCount == 1) {
        it = fmt::format_to(it, "{:02X}       ", Opcodes[0]);
    }
    else if (Definition->ByteCount == 2) {
        it = fmt::format_to(it, "{:02X} {:02X}    ", Opcodes[0], Opcodes[1]);
    }
    else if (Definition->ByteCount == 3) {
        it = fmt::format_to(it, "{:02X} {:02X} {:02X} ", Opcodes[0], Opcodes[1], Opcodes[2]);
    }

    fmt::format_to(it, Definition->Format, Opcodes[1], Opcodes[2], Address + 2 + (int8_t)Opcodes[1]);

    return buffer;
}